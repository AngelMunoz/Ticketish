// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ticketish.Models;

namespace Ticketish.Migrations
{
  [DbContext(typeof(TckContext))]
  [Migration("20181123074316_ChangeRoleRelations")]
  partial class ChangeRoleRelations
  {
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
          .HasAnnotation("Relational:MaxIdentifierLength", 64);

      modelBuilder.Entity("Ticketish.Models.Attachment", b =>
          {
            b.Property<long>("Id")
                      .ValueGeneratedOnAdd();

            b.Property<DateTime>("CreatedAt")
                      .ValueGeneratedOnAdd();

            b.Property<long>("LastUpdatedBy");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasMaxLength(100);

            b.Property<string>("Path")
                      .IsRequired()
                      .HasMaxLength(255);

            b.Property<string>("PublicUrl")
                      .HasMaxLength(255);

            b.Property<long?>("TicketId");

            b.Property<DateTime>("UpdatedAt")
                      .ValueGeneratedOnAddOrUpdate();

            b.HasKey("Id");

            b.HasIndex("TicketId");

            b.ToTable("tck_attachments");
          });

      modelBuilder.Entity("Ticketish.Models.Comment", b =>
          {
            b.Property<long>("Id")
                      .ValueGeneratedOnAdd();

            b.Property<string>("Content")
                      .IsRequired()
                      .HasMaxLength(200);

            b.Property<DateTime>("CreatedAt")
                      .ValueGeneratedOnAdd();

            b.Property<long>("LastUpdatedBy");

            b.Property<int>("Owner");

            b.Property<long>("TicketId");

            b.Property<DateTime>("UpdatedAt")
                      .ValueGeneratedOnAddOrUpdate();

            b.HasKey("Id");

            b.HasIndex("TicketId");

            b.ToTable("tck_comments");
          });

      modelBuilder.Entity("Ticketish.Models.Product", b =>
          {
            b.Property<long>("Id")
                      .ValueGeneratedOnAdd();

            b.Property<DateTime>("CreatedAt")
                      .ValueGeneratedOnAdd();

            b.Property<string>("Description")
                      .HasMaxLength(200);

            b.Property<long>("LastUpdatedBy");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasMaxLength(100);

            b.Property<DateTime>("UpdatedAt")
                      .ValueGeneratedOnAddOrUpdate();

            b.HasKey("Id");

            b.ToTable("tck_products");
          });

      modelBuilder.Entity("Ticketish.Models.Role", b =>
          {
            b.Property<long>("Id")
                      .ValueGeneratedOnAdd();

            b.Property<DateTime>("CreatedAt")
                      .ValueGeneratedOnAdd();

            b.Property<string>("Description")
                      .HasMaxLength(100);

            b.Property<long>("LastUpdatedBy");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasMaxLength(40);

            b.Property<DateTime>("UpdatedAt")
                      .ValueGeneratedOnAddOrUpdate();

            b.HasKey("Id");

            b.ToTable("tck_roles");
          });

      modelBuilder.Entity("Ticketish.Models.Ticket", b =>
          {
            b.Property<long>("Id")
                      .ValueGeneratedOnAdd();

            b.Property<DateTime?>("ClosedAt");

            b.Property<string>("Content")
                      .IsRequired()
                      .HasMaxLength(200);

            b.Property<DateTime>("CreatedAt")
                      .ValueGeneratedOnAdd();

            b.Property<long>("CustomerId");

            b.Property<long>("LastUpdatedBy");

            b.Property<long>("ProductId");

            b.Property<long>("RepresentativeId");

            b.Property<int>("Status");

            b.Property<string>("Title")
                      .IsRequired()
                      .HasMaxLength(100);

            b.Property<DateTime>("UpdatedAt")
                      .ValueGeneratedOnAddOrUpdate();

            b.HasKey("Id");

            b.HasIndex("CustomerId");

            b.HasIndex("ProductId");

            b.HasIndex("RepresentativeId");

            b.ToTable("tck_tickets");
          });

      modelBuilder.Entity("Ticketish.Models.User", b =>
          {
            b.Property<long>("Id")
                      .ValueGeneratedOnAdd();

            b.Property<DateTime>("CreatedAt")
                      .ValueGeneratedOnAdd();

            b.Property<string>("Email")
                      .IsRequired();

            b.Property<string>("LastName")
                      .IsRequired()
                      .HasMaxLength(80);

            b.Property<long>("LastUpdatedBy");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasMaxLength(80);

            b.Property<string>("Password")
                      .IsRequired();

            b.Property<int>("Type");

            b.Property<DateTime>("UpdatedAt")
                      .ValueGeneratedOnAddOrUpdate();

            b.HasKey("Id");

            b.ToTable("tck_users");
          });

      modelBuilder.Entity("Ticketish.Models.UserRole", b =>
          {
            b.Property<long>("Id")
                      .ValueGeneratedOnAdd();

            b.Property<long>("RoleId");

            b.Property<long>("UserId");

            b.HasKey("Id");

            b.HasIndex("RoleId");

            b.HasIndex("UserId");

            b.ToTable("tck_user_role");
          });

      modelBuilder.Entity("Ticketish.Models.Attachment", b =>
          {
            b.HasOne("Ticketish.Models.Ticket")
                      .WithMany("Attachments")
                      .HasForeignKey("TicketId");
          });

      modelBuilder.Entity("Ticketish.Models.Comment", b =>
          {
            b.HasOne("Ticketish.Models.Ticket", "Ticket")
                      .WithMany("Comments")
                      .HasForeignKey("TicketId")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Ticketish.Models.Ticket", b =>
          {
            b.HasOne("Ticketish.Models.User", "Customer")
                      .WithMany()
                      .HasForeignKey("CustomerId")
                      .OnDelete(DeleteBehavior.Cascade);

            b.HasOne("Ticketish.Models.Product", "Product")
                      .WithMany()
                      .HasForeignKey("ProductId")
                      .OnDelete(DeleteBehavior.Cascade);

            b.HasOne("Ticketish.Models.User", "Representative")
                      .WithMany()
                      .HasForeignKey("RepresentativeId")
                      .OnDelete(DeleteBehavior.Cascade);
          });

      modelBuilder.Entity("Ticketish.Models.UserRole", b =>
          {
            b.HasOne("Ticketish.Models.Role", "Role")
                      .WithMany("UserRoles")
                      .HasForeignKey("RoleId")
                      .OnDelete(DeleteBehavior.Cascade);

            b.HasOne("Ticketish.Models.User", "User")
                      .WithMany("UserRoles")
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade);
          });
#pragma warning restore 612, 618
    }
  }
}
